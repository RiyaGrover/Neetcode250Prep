// using minHeap 

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        for(int num : nums){
            freqMap.put(num, freqMap.getOrDefault(num, 0)+1);
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>((a,b) -> 
        a.getValue() - b.getValue());
        for(Map.Entry<Integer, Integer> entry: freqMap.entrySet()){
            minHeap.offer(entry);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }
        int [] result = new int [k];
        int i = 0;
        while(!minHeap.isEmpty()){
            result[i++] = minHeap.poll().getKey();
        }
        return result;
        
    }
}


// using bucket sort 


class Solution {
    public int[] topKFrequent(int[] nums, int k) {
       Map<Integer, Integer> freqmap = new HashMap<>();
       for(int num : nums){
        freqmap.put(num, freqmap.getOrDefault(num, 0) +1);
       }

       List<Integer>[] buckets = new ArrayList[nums.length+1];
       for(int key : freqmap.keySet()){
        int freq = freqmap.get(key);
        if(buckets[freq] == null){
            buckets[freq]= new ArrayList<>();
        }
        buckets[freq].add(key);
       }

       List<Integer> resultList = new ArrayList<>();
       for(int i = buckets.length-1 ; i >= 0 && resultList.size() < k; i--){
        if(buckets[i] != null){
            resultList.addAll(buckets[i]);
        }
       }

       int [] result = new int[k];
       for(int i = 0; i < k ; i++){
        result[i] = resultList.get(i);
       }

        return result;
    }
}